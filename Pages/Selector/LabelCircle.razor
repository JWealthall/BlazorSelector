@layout EmptyLayout
@page "/Selector/LabelCircle"
@inject IPeopleService peopleService;

<style>
    .wheel {
        width: @(_radius * 2M + "rem");
        height: @(_radius * 2M + "rem");
        border: @(_border + "rem") solid rgba(0, 0, 0, 0.8);
        background-color: #54595F;
        border-radius: @(_radius + "rem");
        position: relative;
    }

    .spoke {
        width: @(_radius + "rem");
        height: @(_radius * 0.1M + "rem");
        position: absolute;
    }

    .inner-spoke {
        margin-left: @(_radius * 0.02M + "rem");
        margin-right: @(_radius * 0.2M + "rem");
        width: 100%;
        height: 100%;
        border: 0.1rem solid rgba(0, 0, 0, 0.8);
        border-radius: @(_radius * 0.02M + "rem");
        background-color: #00A683;
        font-size: @(_radius / 16.66M + "rem");
    }

    .winner {
        font-size: @(_radius / 10M + "rem");
    }
</style>
<div class="row pt-3">
    <button class="btn btn-lg btn-primary col-3 mx-auto" @onclick="RunSelection">Run Selection</button>
</div>
<div class="row pt-3">
    <div class="wheel mx-auto">
        @for (var i = 0; i < _nameStyles.Count; i++)
        {
            var angle = (360M / _nameStyles.Count) * i;
            var rotate = angle + "deg";
            // Take account of the height and the border
            var top = (_radius * 0.94M) - ((decimal)(Math.Sin(((double)angle).ToRadians()) * (double)(_radius)) / 2) + "rem";
            // Take account of the border
            var left = (_radius - (decimal)(Math.Cos(((double)angle).ToRadians()) * (double)_radius)) / 2 - (_border) + "rem";
            <div class="spoke d-flex" style="transform: rotate(@rotate); top: @top; left: @left">
                <div class="inner-spoke d-flex" style="@_nameStyles[i].Style">
                    @if (angle >= 90 && angle < 270)
                    {
                        <div class="m-auto d-block" style="transform: rotate(180deg)">@_nameStyles[i].Name</div>
                    }
                    else
                    {
                        <div class="m-auto d-block">@_nameStyles[i].Name</div>
                    }
                </div>
            </div>
        }
    </div>
</div>
<div class="row pt-3">
    <label class="mx-auto winner">@_name</label>
</div>
<div class="row pt-3">
    <a class="btn btn-lg btn-primary col-3 mx-auto" href="">
        <span class="oi oi-home" aria-hidden="true"></span> Home
    </a>

</div>
@code {
    private decimal _radius = 25.0M;
    private decimal _border = 0.2M;
    private List<string> _names = null;
    private List<NameStyle> _nameStyles = new();
    private Random _rnd = new Random();
    private string _name = "?";

    protected override async Task OnInitializedAsync()
    {
        _names = await peopleService.GetNames();
        _names.Shuffle();
        foreach (var name in _names) _nameStyles.Add(new NameStyle(name, ""));
        await base.OnInitializedAsync();
    }

    private async void RunSelection()
    {
        _nameStyles.Shuffle();
        foreach (var nameStyle in _nameStyles)
        {
            nameStyle.Style = "";
        }
        var delay = 10;
        var num = _rnd.Next(_names.Count);
        while (delay < 2000)
        {
            _nameStyles[num].Style = "background-color: #0366d6; animation-name: colorChange; animation-duration: " + delay + "ms;";
            _name = _nameStyles[num].Name;
            StateHasChanged();
            await Task.Delay(delay);
            _nameStyles[num].Style = "";
            delay += delay / 10;
            num++;
            if (num == _nameStyles.Count) num = 0;
        }
        var target = _nameStyles[num];
        target.Style = "background-color: #54595F; animation-name: selectedItem; animation-duration: 500ms; animation-iteration-count: infinite; animation-direction: alternate;";
        _name = target.Name;
        StateHasChanged();
    }
}
